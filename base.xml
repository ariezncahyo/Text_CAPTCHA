<?xml version="1.0" ?>
<project name="Base" basedir="." default="package">
    <autoloader autoloaderpath="vendor/autoload.php"/>

    <taskdef classname="\BigMichi1\Phing\PearPackageV2Task\PearPackageV2Task" name="pearpackagev2" />

    <property name="project.cleaned" value="false" />
    <property name="project.dir" value="${project.basedir}" />

    <target name="test" depends="-init, clean, phpunit" description="Run UnitTests on the code" />
    <target name="verify" depends="-init, clean, phplint, phpunit, phploc, phpcpd, phpdepend, phpmd, phpcs" description="Verify the quality of the code" />
    <target name="docs" depends="-init, clean, phpdoc, phpcb" description="Generate API documentation" />
    <target name="package" depends="-init, clean, verify, docs, dist" description="Do a full build" />

    <target name="-init" depends="-load-properties, -setup-dirs, -setup-filesets" hidden="true" />

    <target name="-generate-package-xml" depends="-copy-to-build" hidden="true">
        <fail message="implement target in your build.xml" />
    </target>

    <target name="-load-properties" hidden="true" unless="project.version">
        <echo message="cs" />
        <property name="project.version" value="UNKNOWN" />
    </target>

    <target name="-setup-dirs" depends="-load-properties" hidden="true">
        <php function="dirname" returnProperty="project.dir">
            <param value="${project.basedir}/src" />
        </php>
        <property name="build.dir" value="${project.dir}/build" />
        <property name="src.dir" value="${project.dir}/src" />
        <property name="docs.dir" value="${project.dir}/docs" />
        <property name="tests.dir" value="${project.dir}/tests" />
        <property name="examples.dir" value="${project.dir}/examples" />

        <echo message="Assigning build directories to properties" level="debug" />
        <property name="build.api.dir" value="${build.dir}/api" />
        <property name="build.codebrowser.dir" value="${build.dir}/code-browser" />
        <property name="build.coverage.dir" value="${build.dir}/coverage" />
        <property name="build.dist.dir" value="${build.dir}/dist" />
        <property name="build.logs.dir" value="${build.dir}/logs" />
        <property name="build.pdepend.dir" value="${build.dir}/pdepend" />
        <property name="build.phpunit.dir" value="${build.dir}/phpunit" />

        <property name="build.dist.temp.dir" value="${build.dist.dir}/${phing.project.name}-${project.version}" />
    </target>

    <target name="-setup-filesets" hidden="true">
        <fileset dir="${src.dir}" id="php.files">
            <patternset>
                <include name="**/*.php" />
            </patternset>
        </fileset>

        <fileset dir="${src.dir}" id="zip.files">
            <patternset>
                <exclude name="build.*" />
            </patternset>
        </fileset>

        <fileset dir="${tests.dir}" id="test.files">
            <patternset>
                <include name="**/*Test.php" />
            </patternset>
        </fileset>

        <fileset dir="${project.dir}" id="doc.files">
            <patternset>
                <include name="README.md" />
                <include name="LICENSE" />
                <include name="TODO" />
            </patternset>
        </fileset>
    </target>

    <target name="clean" depends="-init" description="Clean up working directory">
        <if>
            <isfalse value="${project.cleaned}" />
            <then>
                <echo message="Deleting build directories" level="debug" />
                <delete dir="${build.api.dir}" />
                <delete dir="${build.codebrowser.dir}" />
                <delete dir="${build.coverage.dir}" />
                <delete dir="${build.dist.dir}" />
                <delete dir="${build.logs.dir}" />
                <delete dir="${build.pdepend.dir}" />
                <delete dir="${build.phpunit.dir}" />

                <echo message="Creating build directories" level="debug" />
                <mkdir dir="${build.api.dir}" />
                <mkdir dir="${build.codebrowser.dir}" />
                <mkdir dir="${build.coverage.dir}" />
                <mkdir dir="${build.dist.dir}" />
                <mkdir dir="${build.logs.dir}" />
                <mkdir dir="${build.pdepend.dir}" />
                <mkdir dir="${build.phpunit.dir}" />

                <property name="project.cleaned" value="true" override="true" />
            </then>
        </if>
    </target>

    <target name="-copy-to-build" hidden="true">
        <copy todir="${build.dist.temp.dir}" haltonerror="true">
            <fileset refid="zip.files" />
        </copy>
        <mkdir dir="${build.dist.temp.dir}/tests" />
        <copy todir="${build.dist.temp.dir}/tests" haltonerror="true">
            <fileset dir="${tests.dir}" />
        </copy>
        <mkdir dir="${build.dist.temp.dir}/examples" />
        <copy todir="${build.dist.temp.dir}/examples" haltonerror="true">
            <fileset dir="${examples.dir}" />
        </copy>
        <copy todir="${build.dist.temp.dir}" haltonerror="true">
            <fileset refid="doc.files" />
        </copy>
    </target>

    <target name="dist" depends="-init, clean, -generate-package-xml" description="Create distributable file">
        <tar destfile="${build.dist.dir}/${phing.project.name}-${project.version}.tgz" compression="gzip">
            <fileset dir="${build.dist.dir}/" />
        </tar>
        <delete dir="${build.dist.temp.dir}" />
        <delete file="${build.dist.dir}/package.xml" />
    </target>

    <target name="phpunit" depends="-init" description="Run unit tests with PHPUnit">
        <coverage-setup database="${build.logs.dir}/coverage.db">
            <fileset refid="php.files" />
        </coverage-setup>
        <phpunit printsummary="true" haltonerror="true" haltonfailure="true" codecoverage="true">
            <formatter todir="${build.logs.dir}" type="clover" outfile="Coverage.xml" />
            <batchtest>
                <fileset refid="test.files" />
            </batchtest>
        </phpunit>
        <phpunit>
            <formatter todir="${build.logs.dir}" type="xml" outfile="testsuites.xml" />
            <batchtest>
                <fileset refid="test.files" />
            </batchtest>
        </phpunit>
        <phpunitreport infile="${build.logs.dir}/testsuites.xml" format="frames" todir="${build.phpunit.dir}" />
        <coverage-report outfile="${build.logs.dir}/coverage-report.xml">
            <report toDir="${build.coverage.dir}" styleDir="${project.basedir}/vendor/phing/phing/etc" />
        </coverage-report>
    </target>

    <target name="phpdoc" depends="-init" description="Generate API documentation">
        <phpdoc2 title="${phing.project.name} ${project.version}" destdir="${build.api.dir}" template="responsive">
            <fileset refid="php.files" />
        </phpdoc2>
    </target>

    <target name="phpcb" depends="-init, phpunit, phpcpd, phpdepend, phpmd, phpcs" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb" logoutput="true" checkreturn="true">
            <arg value="--log" />
            <arg path="${build.logs.dir}" />
            <arg value="--source" />
            <arg path="${src.dir}" />
            <arg value="--output" />
            <arg path="${build.codebrowser.dir}" />
        </exec>
    </target>

    <target name="phploc" depends="-init" description="Measure project size using PHPLOC">
        <phploc reportType="xml" reportDirectory="${build.logs.dir}" reportName="phploc">
            <fileset refid="php.files" />
        </phploc>
    </target>

    <target name="phpcpd" depends="-init" description="Find duplicate code using PHPCPD">
        <phpcpd minLines="5" minTokens="20">
            <fileset refid="php.files" />
            <formatter type="pmd" outfile="${build.logs.dir}/pmd-cpd.xml" />
        </phpcpd>
    </target>

    <target name="phpdepend" depends="-init" description="Calculate software metrics using PHP_Depend">
        <phpdepend haltonerror="true">
            <fileset refid="php.files" />
            <logger type="jdepend-chart" outfile="${build.pdepend.dir}/dependencies.svg" />
            <logger type="jdepend-xml" outfile="${build.logs.dir}/jdepend.xml" />
            <logger type="overview-pyramid" outfile="${build.pdepend.dir}/overview-pyramid.svg" />
            <logger type="summary-xml" outfile="${build.logs.dir}/jdepend-summary.xml" />
            <analyzer type="coderank-mode" value="method" />
        </phpdepend>
    </target>

    <target name="phpmd" depends="-init" description="Perform project mess detection using PHPMD">
        <phpmd rulesets="cleancode,codesize,design,naming,unusedcode">
            <fileset refid="php.files" />
            <formatter type="xml" outfile="${build.logs.dir}/pmd.xml" />
        </phpmd>
    </target>

    <target name="phpcs" depends="-init" description="Find coding standard violations using PHP_CodeSniffer">
        <phpcodesniffer standard="PEAR" format="full">
            <fileset refid="php.files" />
            <formatter type="checkstyle" outfile="${build.logs.dir}/checkstyle.xml" />
        </phpcodesniffer>
    </target>

    <target name="phplint" depends="-init" description="Check files for syntax errors">
        <phplint haltonfailure="true" cachefile="${build.logs.dir}/cachefile.txt">
            <fileset refid="php.files" />
        </phplint>
    </target>
</project>